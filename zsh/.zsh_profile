# Set default compilation flags ############################
# export CC=clang
# export CFLAGS='-I /usr/local/opt/llvm/include -fsanitize=signed-integer-overflow -fsanitize=undefined -ggdb3 -O0 -std=c18 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable'
# export CXX=clang++
# export CXXFLAGS='-I /usr/local/opt/llvm/include -fsanitize=signed-integer-overflow -fsanitize=undefined -ggdb3 -O0 -std=c++17 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable'
# export LDFLAGS="-L /usr/local/opt/llvm/lib"
############################################################

## Python3 #################################################
ve() {
    if [[ -z ${VIRTUAL_ENV} ]]; then
        if [[ ! -d venv ]]; then
            virtualenv venv
        fi
        source venv/bin/activate
        echo "python:  $(which python3)"
        echo "pip:     $(which pip3)"
    else
        echo "You are already in a virtual environment"
        return 1
    fi
}
alias de='deactivate'

export CONDA_AUTO_ACTIVATE_BASE=false
__conda_setup="$(\"$BREW_PREFIX/Caskroom/miniforge/base/bin/conda\" 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$BREW_PREFIX/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "$BREW_PREFIX/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="$PATH:$BREW_PREFIX/Caskroom/miniforge/base/bin"
    fi
fi
unset __conda_setup

cve() {
    if [[ -z ${CONDA_PREFIX} ]]; then
        if [[ ! -d venv ]]; then
            conda create -p ./venv -y python=3
        fi
        conda activate ./venv
        echo "python:  $(which python3)"
        echo "pip:     $(which pip3)"
    else
        echo "You are already in a virtual environment"
        return 1
    fi
}
alias cde='conda deactivate'

alias python='python3'
alias pip='pip3'
############################################################

## Misc Functions ##########################################
# Convert text to QR code
qrcode() {
    if [ -z ${1} ]; then
        echo "Usage: ${0} <string>"
        return 1
    else
        printf "${1}" | curl -s -F-=\<- qrenco.de
    fi
}

# Browse web in terminal
browse() {
    font="16"
    if [ ! -z ${2} ]; then
        font=${2}
    fi
    kitty @ set-font-size 1 && \
    carbonyl --zoom=300 --bitmap "${1}" 2> /dev/null && \
    kitty @ set-font-size ${font}
}

# Get Weather
weather() {
    sed '$ d' <(curl -s wttr.in/${1} | grep -v '@igor');
}
############################################################

## FZF functions ###########################################
f() {
    MYSEARCH="*"
    if [ ! -z $1 ]
    then
        MYSEARCH="${1}"
    fi

    locate "${MYSEARCH}" | fzf -m --ansi --preview '[[ $(file --mime {}) =~ binary ]] && echo $(basename {}) is a binary file \($(file --mime-type {} | cut -d ":" -f 2 | cut -c 2-)\) || (bat --plain --color=always --line-range :200 {})'
}

_ff() {
    MYPATH=$1
    FILE=$(rg ${MYPATH} --files --hidden --no-ignore-vcs -g '!.git/*' 2> /dev/null | fzf --ansi --preview '[[ $(file --mime {}) =~ binary ]] && echo $(basename {}) is a binary file \($(file --mime-type {} | cut -d ":" -f 2 | cut -c 2-)\) || (bat --plain --color=always --line-range :200 {})')

    if [ ! -z $FILE ]
    then
        echo ${FILE}
    fi
}

ff() {
    _ff ${MYPATH}
}

ffo() {
    nvim "$(_ff ${MYPATH})"
}

fd() {
    MYPATH="."
    if [ ! -z $1 ]
    then
        MYPATH="${1}"
    fi

    DIR="$(find ${MYPATH} -type d -name ".git" -prune -o -type d -print 2> /dev/null | fzf --ansi --preview 'eza -T --level 1 --color always {}')"

    if [ ! -z $DIR ]
    then
        cd "${DIR}"
    fi
}

ft(){
    if [ -z ${1} ]
    then
        echo "Usage: ${0} <search term> [path]"
        return
    fi

    MYPATH="."
    if [ ! -z $2 ]
    then
        MYPATH="${2}"
    fi

    local match=$(
      rg --hidden --trim --vimgrep --color=never --line-number "$1" ${MYPATH} 2> /dev/null |
        fzf --no-multi --delimiter : \
            --preview "bat --color=always --line-range {2}: {1}"
      )
    local file=$(echo "$match" | cut -d':' -f1)
    if [[ -n $file ]]; then
        nvim $file +$(echo "$match" | cut -d':' -f2)
    fi
}

export FZF_DEFAULT_COMMAND='rg $(pwd) --files --hidden --no-ignore-vcs -g "!.git/*" 2> /dev/null'
export BAT_THEME='Catppuccin-mocha'
export FZF_DEFAULT_OPTS=" \
--color=spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"
############################################################

## Ngrok ###################################################
# Publish a port online using ngrok
publish() {
    local USAGE() {
        printf "publish <start|status|stop>\n"
        printf "publish <set|del> [port]\n"
    }

    if [ -z ${1} ]; then
        USAGE
        return 1
    fi

    if [ ${1} = "start" ]; then
        if [ ! -f "$HOME/Library/Application Support/ngrok/ngrok.yml" ]; then
            printf "Enter auth token: "
            read token
            ngrok config add-authtoken $token
        fi

        ngrok start --none --log=stdout > /dev/null &
        export NGROK_PID=$!
        sleep 2
    elif [ ${1} = "stop" ]; then
        kill $NGROK_PID
        unset NGROK_PID
    elif [ ${1} = "status" ]; then
        if [ -z $NGROK_PID ]; then
            return 1
        fi

        printf "Ports forwarding:\n"
        curl -s http://localhost:4040/api/tunnels | python3 -c "import json;import sys;conns=json.load(sys.stdin)['tunnels'];[print(f\"{c['config']['addr']} -> {c['public_url'][6:]}\") for c in conns]"
    elif [ ${1} = "set" ]; then
        if [ -z ${2} ]; then
            USAGE
            return 1
        fi

        PORT=${2}
        curl -s -X POST http://localhost:4040/api/tunnels -H 'Content-Type: application/json' -d "{\"addr\": \"${PORT}\", \"proto\": \"tcp\", \"name\": \"${PORT}\"}" > /dev/null
    elif [ ${1} = "del" ]; then
        if [ -z ${2} ]; then
            USAGE
            return 1
        fi

        PORT=${2}

        curl -s -X DELETE http://localhost:4040/api/tunnels/${PORT}
    else
        USAGE
        return 1
    fi
}
############################################################

kanata() {
    # Setup Kanata
    # /Applications/.Karabiner-VirtualHIDDevice-Manager.app/Contents/MacOS/Karabiner-VirtualHIDDevice-Manager activate
    # sudo launchctl load /Library/LaunchDaemons/com.example.karabinerdriverdaemon.plist
    # sudo launchctl start com.example.karabinerdriverdaemon.plist
    # sudo kanata --nodelay --quiet --cfg kanata.kbd
    #
    # Remove Kanata
    # /Applications/.Karabiner-VirtualHIDDevice-Manager.app/Contents/MacOS/Karabiner-VirtualHIDDevice-Manager deactivate
    # sudo launchctl stop com.example.karabinerdriverdaemon.plist
    # sudo launchctl unload /Library/LaunchDaemons/com.example.karabinerdriverdaemon.plist

    if [ "$#" -ne 1 ]; then
        echo "Usage: $0 {start|stop|status}"
        return 1
    fi

    case "$1" in
        start)
            if ! /opt/homebrew/bin/tmux -f /dev/null -L new-socket has-session -t kanata 2> /dev/null; then
                /opt/homebrew/bin/tmux -f /dev/null -L new-socket new-session -d -s kanata
                /opt/homebrew/bin/tmux -f /dev/null -L new-socket send-keys -t kanata:0 " sudo /usr/local/bin/kanata --nodelay --quiet; exit" Enter
            else
                printf "kanata is already running\n"
                return 1
            fi
            ;;
        stop)
            if /opt/homebrew/bin/tmux -f /dev/null -L new-socket has-session -t kanata 2> /dev/null; then
                /opt/homebrew/bin/tmux -f /dev/null -L new-socket send-keys -t kanata:0 C-c
                /opt/homebrew/bin/tmux -f /dev/null -L new-socket kill-session -t kanata
            else
                printf "kanata is not running\n"
                return 1
            fi
            ;;
        status)
            if /opt/homebrew/bin/tmux -f /dev/null -L new-socket has-session -t kanata 2> /dev/null; then
                printf "kanata is running\n"
            else
                printf "kanata is not running\n"
                return 1
            fi
            ;;
        *)
            echo "Invalid option: $1"
            return 1
            ;;
    esac
}

## Aliases #################################################
alias vi="nvim"
alias :q='exit'
alias cls='clear'
alias cat='bat'
alias sed='gsed'
alias awk='gawk'
alias tar='gtar'
alias ql='quick-look'
alias del='trash -F'

alias ls='eza --git --icons always'
alias l='eza -lbF --git'
alias ll='eza -lbGF --git'
alias llm='eza -lbGF --git --sort=modified'
alias la='eza -lbhHigUmuSa --time-style=long-iso --git --color-scale'
alias lx='eza -lbhHigUmuSa@ --time-style=long-iso --git --color-scale'
alias lS='eza -1'
alias lt='eza --tree --level=2'
############################################################

# Extra Completions ########################################
source <(command -v podman > /dev/null && podman completion zsh)
source <(command -v k3d > /dev/null && k3d completion zsh)
source <(command -v kubectl > /dev/null && kubectl completion zsh)
############################################################

# vim: ft=bash
